import { jsx as _jsx } from "react/jsx-runtime";
import { createVlayerClient } from "@vlayer/sdk";
import { createContext, useContext } from "react";
import { createExtensionWebProofProvider } from "@vlayer/sdk/web_proof";
import {} from "./types.js";
import { DEFAULT_CONFIG, DEFAULT_CONFIG_ENV } from "./defaults.js";
export const ProofContext = createContext(null);
export const WebProofContext = createContext(null);
export const ProverContext = createContext(null);
export const ProofProvider = ({ config, children, }) => {
    const { proverUrl, notaryUrl, wsProxyUrl, token } = {
        ...DEFAULT_CONFIG[config?.env ?? DEFAULT_CONFIG_ENV],
        ...config,
    };
    const webProofProvider = createExtensionWebProofProvider({
        notaryUrl: notaryUrl,
        wsProxyUrl: wsProxyUrl,
        token,
    });
    const vlayerClient = createVlayerClient({
        url: proverUrl,
        webProofProvider,
        token,
    });
    return (_jsx(WebProofContext.Provider, { value: { webProofProvider, config: { notaryUrl, wsProxyUrl } }, children: _jsx(ProverContext.Provider, { value: { vlayerClient, config: { proverUrl } }, children: children }) }));
};
export const useProofContext = () => {
    const webProofContext = useContext(WebProofContext);
    const proverContext = useContext(ProverContext);
    if (!webProofContext || !proverContext) {
        throw new Error("useProofContext must be used within a ProofProvider");
    }
    return {
        ...webProofContext,
        ...proverContext,
        config: { ...webProofContext.config, ...proverContext.config },
    };
};
export const useWebProofContext = () => {
    const webProofContext = useContext(WebProofContext);
    if (!webProofContext) {
        throw new Error("useWebProofContext must be used within a WebProofProvider");
    }
    return webProofContext;
};
export const useProverContext = () => {
    const proverContext = useContext(ProverContext);
    if (!proverContext) {
        throw new Error("useProverContext must be used within a ProverProvider");
    }
    return proverContext;
};
//# sourceMappingURL=context.js.map