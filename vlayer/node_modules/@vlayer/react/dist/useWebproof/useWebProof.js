import { useEffect, useState } from "react";
import {} from "viem";
import { useProofContext } from "../context.js";
import { WebProofRequestStatus } from "../types.js";
import { MessageFromExtensionType } from "@vlayer/sdk";
export const useWebProof = (webProofRequest) => {
    const { webProofProvider } = useProofContext();
    const [webProof, setWebProof] = useState(null);
    const [error, setError] = useState(null);
    const [status, setStatus] = useState(WebProofRequestStatus.idle);
    useEffect(() => {
        webProofProvider.addEventListeners(MessageFromExtensionType.ProofDone, ({ payload: { presentationJson } }) => {
            setWebProof({
                webProofJson: JSON.stringify({ presentationJson: presentationJson }),
            });
            setStatus(WebProofRequestStatus.success);
        });
        webProofProvider.addEventListeners(MessageFromExtensionType.ProofError, ({ payload: { error } }) => {
            setError(new Error(error));
            setStatus(WebProofRequestStatus.error);
        });
    }, []);
    return {
        webProof,
        error,
        status,
        isIdle: status === WebProofRequestStatus.idle,
        isPending: status === WebProofRequestStatus.pending,
        isError: status === WebProofRequestStatus.error,
        isSuccess: status === WebProofRequestStatus.success,
        requestWebProof: () => {
            setStatus(WebProofRequestStatus.pending);
            webProofProvider.requestWebProof(webProofRequest);
        },
    };
};
//# sourceMappingURL=useWebProof.js.map