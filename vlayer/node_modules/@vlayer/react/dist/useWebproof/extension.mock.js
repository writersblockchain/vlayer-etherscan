import { MessageFromExtensionType, } from "@vlayer/sdk";
export class MockExtensionWebProofProvider {
    mockBehavior;
    listeners = {};
    constructor(mockBehavior = { shouldSucceed: true, delayMs: 100 }) {
        this.mockBehavior = mockBehavior;
    }
    notifyZkProvingStatus() { }
    addEventListeners(messageType, listener) {
        if (!this.listeners[messageType]) {
            this.listeners[messageType] = [];
        }
        this.listeners[messageType].push(listener);
    }
    requestWebProof() {
        // Simulate async response
        setTimeout(() => {
            if (this.mockBehavior.shouldSucceed) {
                const mockProofDoneMessage = {
                    type: MessageFromExtensionType.ProofDone,
                    payload: {
                        presentationJson: this.mockBehavior.mockProof ||
                            { mock: "proof" },
                        decodedTranscript: {
                            sent: "mock sent",
                            recv: "mock recv",
                        },
                    },
                };
                this.listeners[MessageFromExtensionType.ProofDone]?.forEach((listener) => {
                    listener(mockProofDoneMessage);
                });
            }
            else {
                const mockErrorMessage = {
                    type: MessageFromExtensionType.ProofError,
                    payload: {
                        error: this.mockBehavior.mockError || "Mock error occurred",
                    },
                };
                this.listeners[MessageFromExtensionType.ProofError]?.forEach((listener) => listener(mockErrorMessage));
            }
        }, this.mockBehavior.delayMs);
    }
}
//# sourceMappingURL=extension.mock.js.map