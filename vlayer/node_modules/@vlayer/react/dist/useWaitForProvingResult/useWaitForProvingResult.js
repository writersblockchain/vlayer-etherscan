import { useState, useEffect } from "react";
import { useProofContext } from "../context.js";
export var WaitForProvingResultStatus;
(function (WaitForProvingResultStatus) {
    WaitForProvingResultStatus["Idle"] = "Idle";
    WaitForProvingResultStatus["Pending"] = "Pending";
    WaitForProvingResultStatus["Ready"] = "Ready";
    WaitForProvingResultStatus["Error"] = "Error";
})(WaitForProvingResultStatus || (WaitForProvingResultStatus = {}));
export const useWaitForProvingResult = (hash) => {
    const { vlayerClient } = useProofContext();
    const [status, setStatus] = useState(WaitForProvingResultStatus.Idle);
    const [error, setError] = useState(null);
    const [result, setResult] = useState(null);
    useEffect(() => {
        if (!hash) {
            return;
        }
        setStatus(WaitForProvingResultStatus.Pending);
        vlayerClient
            .waitForProvingResult({ hash })
            .then((result) => {
            setStatus(WaitForProvingResultStatus.Ready);
            setResult(result);
        })
            .catch((e) => {
            setError(e);
            setStatus(WaitForProvingResultStatus.Error);
        });
    }, [JSON.stringify(hash)]);
    return {
        status,
        error,
        isIdle: status === WaitForProvingResultStatus.Idle,
        isPending: status === WaitForProvingResultStatus.Pending,
        isReady: status === WaitForProvingResultStatus.Ready,
        isError: status === WaitForProvingResultStatus.Error,
        data: result,
    };
};
//# sourceMappingURL=useWaitForProvingResult.js.map