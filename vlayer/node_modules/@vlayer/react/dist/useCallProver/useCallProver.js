import { useState } from "react";
import {} from "viem";
import {} from "@vlayer/sdk";
import { useProofContext } from "../context.js";
import { useChainId } from "wagmi";
export var ProverStatus;
(function (ProverStatus) {
    ProverStatus["Idle"] = "Idle";
    ProverStatus["Pending"] = "Pending";
    ProverStatus["Ready"] = "Ready";
    ProverStatus["Error"] = "Error";
})(ProverStatus || (ProverStatus = {}));
export const useCallProver = (proveArgs) => {
    // read vlayer client from context
    const { vlayerClient } = useProofContext();
    // read chainId from wagmi
    const wagmiChainId = useChainId();
    const chainId = proveArgs.chainId ?? wagmiChainId;
    // state
    const [status, setStatus] = useState(ProverStatus.Idle);
    const [error, setError] = useState(null);
    const [hash, setHash] = useState(null);
    const callProver = async (args) => {
        setStatus(ProverStatus.Pending);
        try {
            const hash = await vlayerClient.prove({
                ...proveArgs,
                args,
                chainId,
            });
            setHash(hash);
            setStatus(ProverStatus.Ready);
        }
        catch (e) {
            setError(e);
            setStatus(ProverStatus.Error);
        }
    };
    return {
        callProver,
        status,
        error,
        data: hash,
        isIdle: status === ProverStatus.Idle,
        isPending: status === ProverStatus.Pending,
        isReady: status === ProverStatus.Ready,
        isError: status === ProverStatus.Error,
    };
};
//# sourceMappingURL=useCallProver.js.map