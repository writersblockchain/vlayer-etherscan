import { handleProverResponseError, handleAuthErrors, } from "../lib/handleErrors.js";
import { InvalidProverResponseError } from "../lib/errors.js";
import { validateJrpcResponse } from "../lib/jrpc.js";
import { versionsSchema } from "../lib/types/vlayer.js";
import debug from "debug";
const log = debug("vlayer:v_versions");
const v_versionsBody = {
    method: "v_versions",
    params: [],
    id: 1,
    jsonrpc: "2.0",
};
export async function v_versions(url = "http://127.0.0.1:3000", token) {
    const headers = {
        "Content-Type": "application/json",
    };
    if (token !== undefined) {
        headers["Authorization"] = "Bearer " + token;
    }
    const rawResponse = await fetch(url, {
        method: "POST",
        body: JSON.stringify(v_versionsBody),
        headers,
    });
    log("raw response: ", rawResponse);
    const responseJson = await rawResponse.json();
    log("response body: ", responseJson);
    if (!rawResponse.ok) {
        throw handleAuthErrors(rawResponse.status, responseJson);
    }
    const response = validateJrpcResponse(responseJson);
    if (response.error !== undefined) {
        throw handleProverResponseError(response.error);
    }
    const result = versionsSchema.safeParse(response.result);
    if (!result.success) {
        throw new InvalidProverResponseError("v_versions", response.result);
    }
    return result.data;
}
//# sourceMappingURL=v_versions.js.map