import { type Abi, type AbiStateMutability, type Address, type ContractFunctionArgs, type ContractFunctionName } from "viem";
import { type BrandedHash, type ProofDataWithMetrics, type ProofReceipt } from "../lib/types/vlayer.js";
export interface ProveOptions {
    preverifyVersions?: boolean;
}
export declare function prove<T extends Abi, F extends ContractFunctionName<T>>(prover: Address, abi: T, functionName: F, args: ContractFunctionArgs<T, AbiStateMutability, F>, chainId?: number, url?: string, gasLimit?: number, token?: string, options?: ProveOptions): Promise<BrandedHash<T, F>>;
export declare function getProofReceipt<T extends Abi, F extends ContractFunctionName<T>>(hash: BrandedHash<T, F>, url?: string, token?: string): Promise<ProofReceipt>;
export declare function waitForProof<T extends Abi, F extends ContractFunctionName<T>>(hash: BrandedHash<T, F>, url: string, token?: string, numberOfRetries?: number, sleepDuration?: number): Promise<ProofDataWithMetrics>;
//# sourceMappingURL=prover.d.ts.map