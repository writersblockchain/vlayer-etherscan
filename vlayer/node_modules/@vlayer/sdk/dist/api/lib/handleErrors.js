import { errorSchema as authErrorSchema, } from "../lib/types/auth.js";
import { HttpAuthorizationError, HttpUnexpectedError, VersionError, } from "./errors.js";
import { StatusCodes } from "http-status-codes";
import { match } from "ts-pattern";
export function handleProverResponseError({ message, }) {
    if (message?.startsWith("Unsupported CallGuestID")) {
        return new VersionError(message);
    }
    return new Error(`Error response: ${message ?? "unknown error"}`);
}
export function handleAuthErrors(code, body) {
    return match(code)
        .with(StatusCodes.UNAUTHORIZED, (code) => {
        const parsedError = authErrorSchema.safeParse(body);
        if (parsedError.success) {
            const authError = parsedError.data;
            return new HttpAuthorizationError(authError.error);
        }
        else {
            return new HttpUnexpectedError(code);
        }
    })
        .otherwise((code) => new HttpUnexpectedError(code));
}
//# sourceMappingURL=handleErrors.js.map