import { z } from "zod";
export declare const responseSchema: z.ZodEffects<z.ZodObject<{
    id: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodNull]>;
    jsonrpc: z.ZodLiteral<"2.0">;
    result: z.ZodOptional<z.ZodUnknown>;
    error: z.ZodOptional<z.ZodObject<{
        code: z.ZodNumber;
        message: z.ZodString;
        data: z.ZodOptional<z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        code: number;
        message: string;
        data?: unknown;
    }, {
        code: number;
        message: string;
        data?: unknown;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string | number | null;
    jsonrpc: "2.0";
    error?: {
        code: number;
        message: string;
        data?: unknown;
    } | undefined;
    result?: unknown;
}, {
    id: string | number | null;
    jsonrpc: "2.0";
    error?: {
        code: number;
        message: string;
        data?: unknown;
    } | undefined;
    result?: unknown;
}>, {
    id: string | number | null;
    jsonrpc: "2.0";
    error?: {
        code: number;
        message: string;
        data?: unknown;
    } | undefined;
    result?: unknown;
}, {
    id: string | number | null;
    jsonrpc: "2.0";
    error?: {
        code: number;
        message: string;
        data?: unknown;
    } | undefined;
    result?: unknown;
}>;
export type Response = z.infer<typeof responseSchema>;
//# sourceMappingURL=jrpc.d.ts.map