import { type Branded } from "../../../web-proof-commons/utils.js";
import { type Abi, type AbiStateMutability, type Address, type ContractFunctionArgs, type ContractFunctionName, type ContractFunctionReturnType, type Hex } from "viem";
import { type WebProofRequest } from "./webProofProvider.js";
import { type ContractFunctionArgsWithout } from "./viem.js";
import { z } from "zod";
type Calldata = string;
export type CallParams = {
    to: Address;
    data: Calldata;
    gas_limit: number;
};
export type CallContext = {
    chain_id: number;
};
export type BrandedHash<T, F> = Branded<{
    hash: string;
}, [T, F]>;
export type Proof = {
    seal: {
        verifierSelector: Hex;
        seal: readonly [Hex, Hex, Hex, Hex, Hex, Hex, Hex, Hex];
        mode: number;
    };
    callGuestId: Hex;
    length: bigint;
    callAssumptions: {
        proverContractAddress: Address;
        functionSelector: Hex;
        settleChainId: bigint;
        settleBlockHash: Hex;
        settleBlockNumber: bigint;
    };
};
export declare const callHashSchema: z.ZodString;
export type CallHash = z.infer<typeof callHashSchema>;
export declare enum ProofState {
    Queued = "queued",
    AllocateGas = "allocate_gas",
    Preflight = "preflight",
    Proving = "proving",
    Done = "done"
}
export type ProofData = {
    evm_call_result: Hex;
    proof: Proof;
};
export type Metrics = {
    gas: number;
    cycles: number;
    times: {
        preflight: number;
        proving: number;
    };
};
export type ProofDataWithMetrics = {
    data: ProofData;
    metrics: Metrics;
};
export type ProveArgs<T extends Abi, F extends ContractFunctionName<T>> = {
    address: Hex;
    proverAbi: T;
    functionName: F;
    chainId?: number;
    gasLimit?: number;
    args: ContractFunctionArgs<T, AbiStateMutability, F>;
};
export type VlayerClient = {
    prove: <T extends Abi, F extends ContractFunctionName<T>>(args: ProveArgs<T, F>) => Promise<BrandedHash<T, F>>;
    waitForProvingResult: <T extends Abi, F extends ContractFunctionName<T>>(args: {
        hash: BrandedHash<T, F>;
        numberOfRetries?: number;
        sleepDuration?: number;
    }) => Promise<ContractFunctionReturnType<T, AbiStateMutability, F>>;
    proveWeb: <T extends Abi, F extends ContractFunctionName<T>>(args: {
        address: Hex;
        proverAbi: T;
        functionName: F;
        chainId: number;
        gasLimit?: number;
        args: [
            WebProofRequest,
            ...ContractFunctionArgsWithout<T, F, {
                name: "webProof";
            }>
        ];
    }) => Promise<BrandedHash<T, F>>;
};
export declare const proofReceiptSchema: z.ZodDiscriminatedUnion<"status", [z.ZodObject<{
    status: z.ZodLiteral<0>;
    error: z.ZodString;
    data: z.ZodUndefined;
    metrics: z.ZodType<Metrics, z.ZodTypeDef, Metrics>;
    state: z.ZodEnum<[ProofState.AllocateGas, ProofState.Preflight, ProofState.Proving]>;
}, "strip", z.ZodTypeAny, {
    error: string;
    status: 0;
    metrics: Metrics;
    state: ProofState.AllocateGas | ProofState.Preflight | ProofState.Proving;
    data?: undefined;
}, {
    error: string;
    status: 0;
    metrics: Metrics;
    state: ProofState.AllocateGas | ProofState.Preflight | ProofState.Proving;
    data?: undefined;
}>, z.ZodObject<{
    status: z.ZodLiteral<1>;
    error: z.ZodUndefined;
    state: z.ZodEnum<[ProofState.Done, ProofState.AllocateGas, ProofState.Preflight, ProofState.Proving, ProofState.Queued]>;
    data: z.ZodType<ProofData, z.ZodTypeDef, ProofData>;
    metrics: z.ZodType<Metrics, z.ZodTypeDef, Metrics>;
}, "strip", z.ZodTypeAny, {
    status: 1;
    data: ProofData;
    metrics: Metrics;
    state: ProofState;
    error?: undefined;
}, {
    status: 1;
    data: ProofData;
    metrics: Metrics;
    state: ProofState;
    error?: undefined;
}>]>;
export type ProofReceipt = z.infer<typeof proofReceiptSchema>;
export declare const versionsSchema: z.ZodObject<{
    call_guest_id: z.ZodString;
    chain_guest_id: z.ZodString;
    api_version: z.ZodString;
    risc0_version: z.ZodString;
}, "strip", z.ZodTypeAny, {
    call_guest_id: string;
    chain_guest_id: string;
    api_version: string;
    risc0_version: string;
}, {
    call_guest_id: string;
    chain_guest_id: string;
    api_version: string;
    risc0_version: string;
}>;
export type Versions = z.infer<typeof versionsSchema>;
export {};
//# sourceMappingURL=vlayer.d.ts.map