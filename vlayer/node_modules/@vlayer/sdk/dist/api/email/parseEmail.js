import PostalMime, {} from "postal-mime";
export class DkimParsingError extends Error {
    constructor(message) {
        super(message);
        this.name = "DkimParsingError";
    }
}
export async function parseEmail(mime) {
    return await PostalMime.parse(mime.trim());
}
export function getDkimSigners(mail) {
    const dkimHeader = mail.headers.filter((h) => h.key === "dkim-signature");
    if (dkimHeader.length === 0) {
        throw new DkimParsingError("No DKIM header found");
    }
    return dkimHeader.map(parseHeader);
}
export function parseParams(str) {
    return Object.fromEntries(str.split(";").map((s) => s
        .trim()
        .split("=")
        .map((v) => v && v.trim())));
}
function parseHeader(header) {
    const params = parseParams(header.value);
    if (!params) {
        throw new DkimParsingError(`Invalid DKIM header ${header.value}`);
    }
    if (!params.d) {
        throw new DkimParsingError("DKIM header missing domain");
    }
    if (!params.s) {
        throw new DkimParsingError("DKIM header missing selector");
    }
    return {
        domain: params.d,
        selector: params.s,
    };
}
//# sourceMappingURL=parseEmail.js.map