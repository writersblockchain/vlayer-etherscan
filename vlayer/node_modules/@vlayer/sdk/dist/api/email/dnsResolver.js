import { toByteArray } from "base64-js";
import { toHex } from "viem";
import { handleAuthErrors } from "../lib/handleErrors.js";
function parseBase64(data) {
    return toHex(toByteArray(data));
}
function parseVerificationData(response) {
    if (!response.VerificationData) {
        console.warn(`No verification data in DNS response`);
        return {
            validUntil: 0n,
            signature: "0x",
            pubKey: "0x",
        };
    }
    return {
        validUntil: BigInt(response.VerificationData.valid_until),
        signature: parseBase64(response.VerificationData.signature),
        pubKey: parseBase64(response.VerificationData.pub_key),
    };
}
function takeLastAnswer(response) {
    const answer = response.Answer;
    if (!answer || answer?.length == 0) {
        throw new Error(`No DNS answer found\n${JSON.stringify(response, null, 2)}`);
    }
    const record = answer.flat().at(-1);
    return {
        recordType: record.type,
        ttl: BigInt(record.TTL),
        ...record,
    };
}
export class DnsResolver {
    host;
    token;
    constructor(host, token) {
        this.host = host;
        this.token = token;
    }
    async resolveDkimDns(selector, domain) {
        const headers = {
            Accept: "application/dns-json",
        };
        if (this.token !== undefined) {
            headers["Authorization"] = `Bearer ${this.token}`;
        }
        const rawResponse = await fetch(`${this.host}?name=${selector}._domainkey.${domain}&type=TXT`, {
            headers,
        });
        const responseJson = await rawResponse.json();
        if (!rawResponse.ok) {
            throw handleAuthErrors(rawResponse.status, responseJson);
        }
        const response = responseJson;
        return {
            dnsRecord: takeLastAnswer(response),
            verificationData: parseVerificationData(response),
        };
    }
}
//# sourceMappingURL=dnsResolver.js.map