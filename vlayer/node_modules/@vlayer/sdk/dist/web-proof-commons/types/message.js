import { URLPattern } from "urlpattern-polyfill";
import {} from "./redaction.js";
import urlRegex from "url-regex";
import { z } from "zod";
export const EXTENSION_STEP = {
    expectUrl: "expectUrl",
    startPage: "startPage",
    redirect: "redirect",
    notarize: "notarize",
    extractVariables: "extractVariables",
    userAction: "userAction",
    clickButton: "clickButton",
};
export var ZkProvingStatus;
(function (ZkProvingStatus) {
    ZkProvingStatus["NotStarted"] = "NotStarted";
    ZkProvingStatus["Proving"] = "Proving";
    ZkProvingStatus["Done"] = "Done";
    ZkProvingStatus["Error"] = "Error";
})(ZkProvingStatus || (ZkProvingStatus = {}));
export var MessageToExtensionType;
(function (MessageToExtensionType) {
    MessageToExtensionType["RequestWebProof"] = "RequestWebProof";
    MessageToExtensionType["NotifyZkProvingStatus"] = "NotifyZkProvingStatus";
    MessageToExtensionType["OpenSidePanel"] = "OpenSidePanel";
    MessageToExtensionType["CloseSidePanel"] = "CloseSidePanel";
})(MessageToExtensionType || (MessageToExtensionType = {}));
export var LegacyMessageToExtensionType;
(function (LegacyMessageToExtensionType) {
    LegacyMessageToExtensionType["Ping"] = "Ping";
})(LegacyMessageToExtensionType || (LegacyMessageToExtensionType = {}));
export var ExtensionInternalMessageType;
(function (ExtensionInternalMessageType) {
    ExtensionInternalMessageType["RedirectBack"] = "RedirectBack";
    ExtensionInternalMessageType["TabOpened"] = "TabOpened";
    ExtensionInternalMessageType["CleanProvingSessionStorageOnClose"] = "CleanProvingSessionStorageOnClose";
    ExtensionInternalMessageType["CloseSidePanel"] = "CloseSidePanel";
    ExtensionInternalMessageType["ProofDone"] = "ProofDone";
    ExtensionInternalMessageType["ProofError"] = "ProofError";
    ExtensionInternalMessageType["ProofProcessing"] = "ProofProcessing";
    ExtensionInternalMessageType["ResetTlsnProving"] = "ResetTlsnProving";
    ExtensionInternalMessageType["StepCompleted"] = "StepCompleted";
})(ExtensionInternalMessageType || (ExtensionInternalMessageType = {}));
export var MessageFromExtensionType;
(function (MessageFromExtensionType) {
    MessageFromExtensionType["RedirectBack"] = "RedirectBack";
    MessageFromExtensionType["SidePanelClosed"] = "SidePanelClosed";
    MessageFromExtensionType["ProofDone"] = "ProofDone";
    MessageFromExtensionType["ProofError"] = "ProofError";
    MessageFromExtensionType["ProofProcessing"] = "ProofProcessing";
    MessageFromExtensionType["Pong"] = "Pong";
    MessageFromExtensionType["StepCompleted"] = "StepCompleted";
})(MessageFromExtensionType || (MessageFromExtensionType = {}));
export var VariableSource;
(function (VariableSource) {
    VariableSource["ResponseBody"] = "ResponseBody";
    VariableSource["RequestBody"] = "RequestBody";
    VariableSource["Headers"] = "Headers";
})(VariableSource || (VariableSource = {}));
export var StepValidationErrors;
(function (StepValidationErrors) {
    StepValidationErrors["InvalidUrl"] = "InvalidUrl";
    StepValidationErrors["InvalidUrlPattern"] = "InvalidUrlPattern";
})(StepValidationErrors || (StepValidationErrors = {}));
export var StepValidationErrorMessage;
(function (StepValidationErrorMessage) {
    StepValidationErrorMessage["InvalidUrl"] = "Wrong url";
    StepValidationErrorMessage["InvalidUrlPattern"] = "Wrong url pattern";
})(StepValidationErrorMessage || (StepValidationErrorMessage = {}));
export class StepValidationError extends Error {
    constructor(message, name) {
        super(message);
        this.name = name;
    }
}
export function assertUrl(url) {
    const regex = urlRegex({ strict: true });
    const isUrl = regex.test(url);
    if (!isUrl) {
        throw new StepValidationError(`${StepValidationErrorMessage.InvalidUrl}: ${url}`, StepValidationErrors.InvalidUrl);
    }
}
export function assertUrlPattern(urlPattern) {
    try {
        new URLPattern(urlPattern);
    }
    catch {
        throw new StepValidationError(`${StepValidationErrorMessage.InvalidUrlPattern}: ${urlPattern} `, StepValidationErrors.InvalidUrlPattern);
    }
}
const messageFromExtensionSchema = z.object({
    type: z.enum(Object.values(MessageFromExtensionType)),
});
const messageToExtensionSchema = z.object({
    type: z.enum(Object.values(MessageToExtensionType)),
});
const extensionInternalMessageSchema = z.object({
    type: z.enum(Object.values(ExtensionInternalMessageType)),
});
const legacyPingMessageSchema = z.object({
    message: z.literal("ping"),
});
export function isMessageFromExtension(message) {
    return messageFromExtensionSchema.safeParse(message).success;
}
export function isLegacyPingMessage(message) {
    return legacyPingMessageSchema.safeParse(message).success;
}
export function isMessageToExtension(message) {
    return messageToExtensionSchema.safeParse(message).success;
}
export function isExtensionInternalMessage(message) {
    return extensionInternalMessageSchema.safeParse(message).success;
}
//# sourceMappingURL=message.js.map