import { z } from "zod";
export declare const POSSIBLE_VLAYER_ENVS: readonly ["mainnet", "testnet", "dev"];
export declare const POSSIBLE_CLIENT_AUTH_MODES: readonly ["wallet", "envPrivateKey"];
export declare const stringBoolean: z.ZodEffects<z.ZodEnum<["true", "false"]>, boolean, "true" | "false">;
export declare const envSchema: z.ZodObject<{
    CHAIN_NAME: z.ZodString;
    EXAMPLES_TEST_PRIVATE_KEY: z.ZodString;
    CLIENT_AUTH_MODE: z.ZodOptional<z.ZodEnum<["wallet", "envPrivateKey"]>>;
    JSON_RPC_URL: z.ZodString;
    PROVER_URL: z.ZodString;
    VLAYER_ENV: z.ZodEnum<["mainnet", "testnet", "dev"]>;
    DNS_SERVICE_URL: z.ZodOptional<z.ZodString>;
    NOTARY_URL: z.ZodOptional<z.ZodString>;
    SHOULD_DEPLOY_VERIFIER_ROUTER: z.ZodOptional<z.ZodEffects<z.ZodEnum<["true", "false"]>, boolean, "true" | "false">>;
    VLAYER_API_TOKEN: z.ZodOptional<z.ZodString>;
    WS_PROXY_URL: z.ZodOptional<z.ZodString>;
    GAS_LIMIT: z.ZodOptional<z.ZodEffects<z.ZodString, number, string>>;
}, "strip", z.ZodTypeAny, {
    CHAIN_NAME: string;
    EXAMPLES_TEST_PRIVATE_KEY: string;
    JSON_RPC_URL: string;
    PROVER_URL: string;
    VLAYER_ENV: "mainnet" | "testnet" | "dev";
    CLIENT_AUTH_MODE?: "wallet" | "envPrivateKey" | undefined;
    DNS_SERVICE_URL?: string | undefined;
    NOTARY_URL?: string | undefined;
    SHOULD_DEPLOY_VERIFIER_ROUTER?: boolean | undefined;
    VLAYER_API_TOKEN?: string | undefined;
    WS_PROXY_URL?: string | undefined;
    GAS_LIMIT?: number | undefined;
}, {
    CHAIN_NAME: string;
    EXAMPLES_TEST_PRIVATE_KEY: string;
    JSON_RPC_URL: string;
    PROVER_URL: string;
    VLAYER_ENV: "mainnet" | "testnet" | "dev";
    CLIENT_AUTH_MODE?: "wallet" | "envPrivateKey" | undefined;
    DNS_SERVICE_URL?: string | undefined;
    NOTARY_URL?: string | undefined;
    SHOULD_DEPLOY_VERIFIER_ROUTER?: "true" | "false" | undefined;
    VLAYER_API_TOKEN?: string | undefined;
    WS_PROXY_URL?: string | undefined;
    GAS_LIMIT?: string | undefined;
}>;
export declare const configSchema: z.ZodEffects<z.ZodObject<{
    CHAIN_NAME: z.ZodString;
    EXAMPLES_TEST_PRIVATE_KEY: z.ZodString;
    CLIENT_AUTH_MODE: z.ZodOptional<z.ZodEnum<["wallet", "envPrivateKey"]>>;
    JSON_RPC_URL: z.ZodString;
    PROVER_URL: z.ZodString;
    VLAYER_ENV: z.ZodEnum<["mainnet", "testnet", "dev"]>;
    DNS_SERVICE_URL: z.ZodOptional<z.ZodString>;
    NOTARY_URL: z.ZodOptional<z.ZodString>;
    SHOULD_DEPLOY_VERIFIER_ROUTER: z.ZodOptional<z.ZodEffects<z.ZodEnum<["true", "false"]>, boolean, "true" | "false">>;
    VLAYER_API_TOKEN: z.ZodOptional<z.ZodString>;
    WS_PROXY_URL: z.ZodOptional<z.ZodString>;
    GAS_LIMIT: z.ZodOptional<z.ZodEffects<z.ZodString, number, string>>;
}, "strip", z.ZodTypeAny, {
    CHAIN_NAME: string;
    EXAMPLES_TEST_PRIVATE_KEY: string;
    JSON_RPC_URL: string;
    PROVER_URL: string;
    VLAYER_ENV: "mainnet" | "testnet" | "dev";
    CLIENT_AUTH_MODE?: "wallet" | "envPrivateKey" | undefined;
    DNS_SERVICE_URL?: string | undefined;
    NOTARY_URL?: string | undefined;
    SHOULD_DEPLOY_VERIFIER_ROUTER?: boolean | undefined;
    VLAYER_API_TOKEN?: string | undefined;
    WS_PROXY_URL?: string | undefined;
    GAS_LIMIT?: number | undefined;
}, {
    CHAIN_NAME: string;
    EXAMPLES_TEST_PRIVATE_KEY: string;
    JSON_RPC_URL: string;
    PROVER_URL: string;
    VLAYER_ENV: "mainnet" | "testnet" | "dev";
    CLIENT_AUTH_MODE?: "wallet" | "envPrivateKey" | undefined;
    DNS_SERVICE_URL?: string | undefined;
    NOTARY_URL?: string | undefined;
    SHOULD_DEPLOY_VERIFIER_ROUTER?: "true" | "false" | undefined;
    VLAYER_API_TOKEN?: string | undefined;
    WS_PROXY_URL?: string | undefined;
    GAS_LIMIT?: string | undefined;
}>, {
    vlayerEnv: "mainnet" | "testnet" | "dev";
    privateKey: import("viem").Hex;
    token: string | undefined;
    deployConfig: {
        shouldRedeployVerifierRouter: boolean;
    };
    gasLimit: number;
    chainName: string;
    jsonRpcUrl: string;
    proverUrl: string;
    clientAuthMode?: "wallet" | "envPrivateKey" | undefined;
    dnsServiceUrl?: string | undefined;
    notaryUrl?: string | undefined;
    wsProxyUrl?: string | undefined;
}, {
    CHAIN_NAME: string;
    EXAMPLES_TEST_PRIVATE_KEY: string;
    JSON_RPC_URL: string;
    PROVER_URL: string;
    VLAYER_ENV: "mainnet" | "testnet" | "dev";
    CLIENT_AUTH_MODE?: "wallet" | "envPrivateKey" | undefined;
    DNS_SERVICE_URL?: string | undefined;
    NOTARY_URL?: string | undefined;
    SHOULD_DEPLOY_VERIFIER_ROUTER?: "true" | "false" | undefined;
    VLAYER_API_TOKEN?: string | undefined;
    WS_PROXY_URL?: string | undefined;
    GAS_LIMIT?: string | undefined;
}>;
//# sourceMappingURL=schema.d.ts.map