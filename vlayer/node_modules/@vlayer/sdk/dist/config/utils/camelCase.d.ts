type CamelCase<T extends string> = T extends `${infer F}_${infer R}` ? `${Lowercase<F>}${Capitalize<CamelCase<R>>}` : Lowercase<T>;
type CamelCasedKeys<T extends Record<string, unknown>> = {
    [K in keyof T as CamelCase<K extends string ? K : never>]: T[K];
};
export declare const keysToCamelCase: <T extends Record<string, unknown>>(obj: T) => CamelCasedKeys<T>;
export declare const toCamelCase: <T extends string>(str: T) => CamelCase<T>;
export {};
//# sourceMappingURL=camelCase.d.ts.map