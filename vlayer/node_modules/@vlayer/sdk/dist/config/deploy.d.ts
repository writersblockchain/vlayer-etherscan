import { type EthClient } from "./createContext.js";
import { type ContractArg, type ContractSpec } from "../api/lib/types/ethereum.js";
import { type Address } from "viem";
import type { VlayerContextConfig } from "./types.js";
export declare const waitForContractDeploy: ({ client, hash, }: {
    client: EthClient;
    hash: `0x${string}`;
}) => Promise<Address>;
export declare const waitForTransactionReceipt: ({ client, hash, }: {
    client: EthClient;
    hash: `0x${string}`;
}) => Promise<import("viem").TransactionReceipt>;
export declare const deployProver: ({ proverSpec, proverArgs, }: {
    proverSpec: ContractSpec;
    proverArgs?: ContractArg[];
}) => Promise<`0x${string}`>;
export declare const deployVlayerContracts: ({ proverSpec, verifierSpec, proverArgs, verifierArgs, config: configOverride, }: {
    proverSpec: ContractSpec;
    verifierSpec: ContractSpec;
    proverArgs?: ContractArg[];
    verifierArgs?: ContractArg[];
    config?: Partial<VlayerContextConfig>;
}) => Promise<{
    prover: `0x${string}`;
    verifier: `0x${string}`;
}>;
//# sourceMappingURL=deploy.d.ts.map